generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           String    @default("USER")
  accounts       Account[]
  listings       Listing[]
  reports        Report[]
  sessions       Session[]
  favorites      Listing[] @relation("UserFavorites")
  passwordResets PasswordReset[]
  notifications  Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id                String   @id @default(cuid())
  title             String
  description       String
  price             Float
  location          String
  images            String   @default("[]") // JSON array of image URLs
  bedrooms          Int
  bathrooms         Int
  size              Int
  amenities         String   @default("[]") // JSON array of amenities
  buildingAmenities String   @default("[]") // JSON array of building amenities
  propertyType      String
  leaseType         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  status            String   @default("ACTIVE")
  featured          Boolean  @default(false)
  landlordEmail     String
  landlordPhone     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports           Report[]
  favoritedBy       User[]   @relation("UserFavorites")
  notifications     Notification[] @relation("ListingNotifications")

  @@index([userId])
  @@index([status])
}

model Report {
  id          String   @id @default(cuid())
  type        String
  targetId    String
  reason      String
  description String?
  status      String   @default("PENDING")
  reporterId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listingId   String?
  Listing     Listing? @relation(fields: [listingId], references: [id])
  reporter    User     @relation(fields: [reporterId], references: [id])

  @@index([reporterId])
  @@index([targetId])
  @@index([status])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  listingId   String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing     Listing? @relation("ListingNotifications", fields: [listingId], references: [id], onDelete: SetNull)
  type        String
  title       String
  description String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([listingId])
}
